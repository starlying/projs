export class User {  id: string  userName: string  idCardNumber: string  avatarUrl: string  orgID: string  constructor() { }}export class Member {  id: string  userName: string  idCardNumber: string  avatarUrl: string  orgID: string  constructor() { }}export class Upload {  userId: string  uploadType: string  url: string  constructor() { }}export interface Error {  status: number  message: string}export enum EAlertType {  SUCCESS,  INFO,  WARNING,  DANGER}export class EAlertTypeUtils {  static getValue(type: EAlertType): string {    if (type === EAlertType.SUCCESS) {      return "success"    } else if (type === EAlertType.INFO) {      return "info"    } else if (type === EAlertType.WARNING) {      return "warning"    } else if (type === EAlertType.DANGER) {      return "danger"    }    return ""  }}export class Alert {  constructor(public alertType: EAlertType, public message: string, public pageUrl?: string, public pageText?: string) { }}export enum ERestMethod {  GET,  POST,  PUT,  DELETE,  PATCH}export class ERestMethodUtils {  static getValue(method: ERestMethod): string {    if (method === ERestMethod.GET) {      return "GET"    } else if (method === ERestMethod.POST) {      return "POST"    } else if (method === ERestMethod.PUT) {      return "PUT"    } else if (method === ERestMethod.DELETE) {      return "DELETE"    } else if (method === ERestMethod.PATCH) {      return "PATCH"    }    return "POST"  }  static equals(methodStr: string, method: ERestMethod) {    return (ERestMethodUtils.getValue(method) === methodStr)  }  static errorCode(status: number): string {    switch (status) {      case Const.STATUS_BAD_REQUEST:        return 'Bad Request'      case Const.STATUS_UNAUTHORIZED:        return 'Unauthorized'      case Const.STATUS_PAYMENT_REQUIRED:        return 'Payment Required'      case Const.STATUS_FORBIDDEN:        return 'Forbidden'      case Const.STATUS_NOT_FOUND:        return 'Not Found'      case Const.STATUS_METHOD_NOT_ALLOWED:        return 'Method Not Allowed'      case Const.STATUS_NOT_ACCEPTABLE:        return 'Not Acceptable'      case Const.STATUS_PROXY_AUTHENTICATION_REQUIRED:        return 'Proxy Authentication Required'      case Const.STATUS_REQUEST_TIMEOUT:        return 'Request Timeout'      case Const.STATUS_CONFLICT:        return 'Conflict'      case Const.STATUS_GONE:        return 'Gone'      case Const.STATUS_LENGTH_REQUIRED:        return 'Length Required'      case Const.STATUS_INTERNAL_SERVER_ERROR:        return 'Internal Server Error'    }    return 'Unknown Error'  }}export interface Options {  api?: string;  token?: string;  username?: string;  password?: string;}export class Const {  static ACCESS_TOKEN = "X-Get3W-Access-Token"  static USER = "X-Get3W-User"  static MEMBER = "X-Get3W-Member"  static FROM_LOCAL = "local"  static FROM_CLOUD = "cloud"  static DATA_TYPE_TEXT: string = "Text"  static DATA_TYPE_TEXT_AREA: string = "TextArea"  static DATA_TYPE_PASSWORD: string = "Password"  static DATA_TYPE_EDITOR: string = "Editor"  static DATA_TYPE_SELECT: string = "Select"  static DATA_TYPE_CHECK_BOX: string = "CheckBox"  static DATA_TYPE_COLOR: string = "Color"  static PAYLOAD_STATUS_ADDED = "added"  static PAYLOAD_STATUS_MODIFIED = "modified"  static PAYLOAD_STATUS_REMOVED = "removed"  static PAYLOAD_TYPE_CONFIG = "config"  static PAYLOAD_TYPE_SITE = "site"  static PAYLOAD_TYPE_PAGE = "page"  static PAYLOAD_TYPE_SECTION = "section"  static STATUS_NOT_MODIFIED = 304  static STATUS_BAD_REQUEST = 400  static STATUS_UNAUTHORIZED = 401  static STATUS_PAYMENT_REQUIRED = 402  static STATUS_FORBIDDEN = 403  static STATUS_NOT_FOUND = 404  static STATUS_METHOD_NOT_ALLOWED = 405  static STATUS_NOT_ACCEPTABLE = 406  static STATUS_PROXY_AUTHENTICATION_REQUIRED = 407  static STATUS_REQUEST_TIMEOUT = 408  static STATUS_CONFLICT = 409  static STATUS_GONE = 410  static STATUS_LENGTH_REQUIRED = 411  static STATUS_INTERNAL_SERVER_ERROR = 500}